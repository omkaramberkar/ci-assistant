package com.omkar.core.data.model

import com.squareup.moshi.Json

data class Project(
    @field:Json(name = "on_dashboard") val onDashboard: Boolean,
    @field:Json(name = "emails") val emails: String,
    @field:Json(name = "irc_server") val ircServer: Any,
    @field:Json(name = "ssh_keys") val sshKeys: List<Any>,
    @field:Json(name = "branches") val branches: Map<String, BranchInfo>,
    @field:Json(name = "irc_keyword") val ircKeyword: Any,
    @field:Json(name = "oss") val oss: Boolean,
    @field:Json(name = "slack_channel") val slackChannel: Any,
    @field:Json(name = "hipchat_notify_prefs") val hipchatNotifyPrefs: Any,
    @field:Json(name = "reponame") val repoName: String,
    @field:Json(name = "dependencies") val dependencies: String,
    //@field:Json(name = "aws") val aws: Aws,
    @field:Json(name = "slack_webhook_url") val slackWebhookUrl: Any,
    @field:Json(name = "irc_channel") val ircChannel: Any,
    @field:Json(name = "parallel") val parallel: Int,
    @field:Json(name = "campfire_subdomain") val campfireSubdomain: Any,
    @field:Json(name = "slack_integration_access_token") val slackIntegrationAccessToken: Any,
    @field:Json(name = "username") val username: String,
    @field:Json(name = "campfire_notify_prefs") val campfireNotifyPrefs: Any,
    @field:Json(name = "slack_integration_team") val slackIntegrationTeam: Any,
    @field:Json(name = "slack_integration_channel") val slackIntegrationChannel: Any,
    @field:Json(name = "hipchat_notify") val hipchatNotify: Any,
    @field:Json(name = "heroku_deploy_user") val herokuDeployUser: Any,
    @field:Json(name = "irc_username") val ircUsername: Any,
    @field:Json(name = "slack_notify_prefs") val slackNotifyPrefs: Any,
    @field:Json(name = "scopes") val scopes: List<String>,
    @field:Json(name = "campfire_room") val campfireRoom: Any,
    @field:Json(name = "hipchat_api_token") val hipchatApiToken: Any,
    @field:Json(name = "campfire_token") val campfireToken: Any,
    @field:Json(name = "slack_subdomain") val slackSubdomain: Any,
    @field:Json(name = "has_usable_key") val hasUsableKey: Boolean,
    @field:Json(name = "setup") val setup: String,
    @field:Json(name = "vcs_type") val vcsType: String,
    //@field:Json(name = "feature_flags") val featureFlags: FeatureFlags,
    @field:Json(name = "irc_password") val ircPassword: Any,
    @field:Json(name = "compile") val compile: String,
    @field:Json(name = "slack_integration_notify_prefs") val slackIntegrationNotifyPrefs: Any,
    @field:Json(name = "slack_integration_webhook_url") val slackIntegrationWebhookUrl: Any,
    @field:Json(name = "irc_notify_prefs") val ircNotifyPrefs: Any,
    @field:Json(name = "slack_integration_team_id") val slackIntegrationTeamId: Any,
    @field:Json(name = "extra") val extra: String,
    @field:Json(name = "jira") val jira: Any,
    @field:Json(name = "slack_integration_channel_id") val slackIntegrationChannelId: Any,
    @field:Json(name = "language") val language: String,
    @field:Json(name = "hipchat_room") val hipchatRoom: Any,
    @field:Json(name = "flowdock_api_token") val flowdockApiToken: Any,
    @field:Json(name = "slack_channel_override") val slackChannelOverride: Any,
    @field:Json(name = "vcs_url") val vcsUrl: String,
    @field:Json(name = "following") val following: Boolean,
    @field:Json(name = "default_branch") val defaultBranch: String,
    @field:Json(name = "slack_api_token") val slackApiToken: Any,
    @field:Json(name = "test") val test: String
)
